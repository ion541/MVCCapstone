@model MVCCapstone.Models.ThreadViewModel
@using PagedList
@using PagedList.Mvc 
@using System.Web.Security;
@{
    ViewBag.Title = "View Thread - " + Model.threadTitle;
}
<div class="row">
 
    @Html.RouteLink("Back To Thread", new { controller = "forum", action = "thread", forumid = Model.forumId }, new { @class = "btn btn-default" })

    @if(User.Identity.IsAuthenticated && User.IsInRole("admin")) {
    <span class="pull-right">  
               @Ajax.ActionLink("Lock Thread",
            "lockthread",
            new { threadid = Model.threadId },
            new AjaxOptions
            { 
                HttpMethod = "POST",
                InsertionMode = InsertionMode.Replace,
                UpdateTargetId = "lockMessage",
            },
            new {@class="btn btn-primary" }
        )
    </span>
    }
</div>

<div class="row">
        <span class="col-sm-12" style="color: red; text-align:center"id="lockMessage"></span>
</div>

<div class="row">
    <h2>@Model.threadTitle</h2>
</div>

<br />

<div class="row"> 
    <span class="pull-right">
        @Html.PagedListPager(Model.postList, page => Url.Action("viewthread", new {threadid = Model.threadId, page }), PagedListRenderOptions.ClassicPlusFirstAndLast)
    </span>
</div>

<div class="row">
    <div class="col-sm-12">
    @if (Model.postList.Count() > 0) {
        foreach (MVCCapstone.Models.PostViewModel post in Model.postList)
        {
            <div class="row panel panel-default">

                <div class="col-sm-12 panel panel-primary">
                    Posted: @post.datePosted.ToShortDateString() - @post.datePosted.ToLongTimeString()
                    <span id="@post.postId" class="pull-right">post #@post.postId</span>
                </div>

                <div class="col-sm-3 panel-primary">
                    <p>
                        <strong>@post.userName</strong> 
                        @if(Roles.IsUserInRole(@post.userName,"admin")){ <span style="color:red">[ A ]</span> } <br />
                        Member Since: @post.memberSince.ToShortDateString() <br />
                        Total Posts: @post.totalPost 
                     
                    </p>
                </div>
                <div class="col-sm-9">
                    @if (@post.replyPostContent != null) {
                        if (post.replyPostContent.Length > 500) 
                        {
                            <div class="text-container">
                                <div class="text-content short-text">
    	                            <blockquote style="word-wrap: break-word; white-space: pre-line">
                                        <strong> Replying To: @post.replyTo</strong>
                                        @post.replyPostContent
                                    </blockquote>
                                </div> 
                                <div class="show-more pull-right">
                                    <a style="font-weight:bold; color:#3399FF" href="#">Show More [ + ]</a>
                                </div>  
                            </div>  
                        
                        } else {
                            
                         <blockquote style="word-wrap: break-word; white-space: pre-line">
                            <strong> Replying To: @post.replyTo</strong>
                            @post.replyPostContent
                        </blockquote> 
                          
                        }
                    <br />
                    }
                    
                    <p style="word-wrap: break-word; white-space: pre-line">@post.postContent</p>
                </div>
         
                <div style="border-radius: 4px; border :1px solid #428bca" class="col-sm-12">
                    &nbsp;
                    <span class="pull-left">
                        @if (post.dateModified != null) {
                            @:Last Modified: @post.dateModified
                        }
                    </span>
                    <span class="pull-right">
                        @if (User.Identity.IsAuthenticated && User.Identity.Name.ToLower() != post.userName.ToLower()) {
                             @Ajax.ActionLink("Reply",
                                "showpost",
                                new { threadid = Model.threadId, replyPostId = post.postId },
                                new AjaxOptions
                                { 
                                    HttpMethod = "POST",
                                    InsertionMode = InsertionMode.Replace,
                                    UpdateTargetId = "postSection",
                                    OnSuccess = "moveToPost"
                                }
                            )
                        }
                        @if (User.IsInRole("admin") || User.Identity.Name.ToLower() == post.userName.ToLower())
                        {
                            @Ajax.ActionLink("Edit",
                                "showedit",
                                new { postid = post.postId, page = Request.QueryString["page"] },
                                new AjaxOptions
                                { 
                                    HttpMethod = "POST",
                                    InsertionMode = InsertionMode.Replace,
                                    UpdateTargetId = "postSection",
                                    OnSuccess = "moveToPost"
                                }
                            )
                        }
                    </span>

                </div>
            </div>
        
        }
    } else {
        <br /> <h2>Wo-oh, Cannot find any posts!</h2> <br />
    }
    </div>
</div>

<div class="row">
    @if (User.Identity.IsAuthenticated) {
        @Ajax.ActionLink("Create Post",
            "showpost",
            new { threadid = Model.threadId },
            new AjaxOptions
            { 
                HttpMethod = "POST",
                InsertionMode = InsertionMode.Replace,
                UpdateTargetId = "postSection",
                OnSuccess = "moveToPost"
            },
            new {@class="btn btn-primary" }
        )
    }
        
    <span class="pull-right">
        @Html.PagedListPager(Model.postList, page => Url.Action("viewthread", new {threadid = Model.threadId, page }), PagedListRenderOptions.ClassicPlusFirstAndLast)
    </span>
</div>

<div class="row">
    <div id="postSection"></div>
</div>

