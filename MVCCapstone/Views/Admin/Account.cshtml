@model MVCCapstone.Models.AccountSearchViewModel
@using PagedList
@using PagedList.Mvc
@{
    ViewBag.Title = "Account";
    
    var RoleSelected = new List<int>();
    
    if (ViewBag.RoleSelected != null) {
        RoleSelected = ViewBag.RoleSelected as List<int>;
    }
}

@Html.Partial("Index")

<h2>Account Management</h2>
<div class="message-error">@ViewBag.displayErrorMessage</div>
<div class="message-success">@ViewBag.RoleChangeMessage</div>
<br />
@if (ViewBag.displayEditSection == true)
{
    using (Html.BeginForm("Account", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()

        <fieldset>
            <legend>Get User List Form</legend>
            <ol>
                <li>
                  
                    @Html.LabelFor(m => m.UserRoles.UserId)
                    @Html.TextBoxFor(m => m.UserRoles.UserId, new { @Value = Model.UserRoles.UserId, ReadOnly = "readonly" })
                </li>
                <li>
                    @Html.LabelFor(m => m.UserRoles.Account)
                    @Html.TextBoxFor(m => m.UserRoles.Account, new { @Value = Model.UserRoles.Account, ReadOnly = "readonly" })
                    @Html.ValidationMessageFor(m => m.AccountListModel.AccountName)
                </li>
                <li> 
                    @foreach (var role in Model.UserRoles.SelectRole)
                    {
                        if (Model.UserRoles.CurrentRole == role)
                        {
                             <b>@Html.RadioButtonFor(m => m.UserRoles.SelectRole, role, new { @checked = "checked" })  @role</b>
                        }
                        else
                        {
                             <b>@Html.RadioButtonFor(m => m.UserRoles.SelectRole, role)  @role</b>
                        }
                    }
                </li>
                <li>
                    
                </li>
            </ol>

            @Html.HiddenFor(m => m.UserRoles.hiddenAccount, new { @Value = Model.UserRoles.hiddenAccount })
            @Html.HiddenFor(m => m.UserRoles.hiddenDisplay, new { @Value = Model.UserRoles.hiddenDisplay })
            @Html.HiddenFor(m => m.UserRoles.hiddenPage, new { @Value = Model.UserRoles.hiddenPage })
            @Html.HiddenFor(m => m.UserRoles.hiddenRoleId, new { @Value = Model.UserRoles.hiddenRoleId })

            <input type="submit" value="Apply Changes" />
        </fieldset>
    }
    
    <hr />
}



<h3><b>Search / Filter </b></h3>
@using (Html.BeginForm("Account", "Admin")) {
    @Html.AntiForgeryToken()

    <fieldset>
        <legend>Get User List Form</legend>
        <ol>

            <li>
                @Html.LabelFor(m => m.AccountListModel.AccountName)
                @Html.TextBoxFor(m => m.AccountListModel.AccountName, new {@Value = ViewBag.AccountNameFieldValue} )
                @Html.ValidationMessageFor(m => m.AccountListModel.AccountName)
            </li>
            <li>
            @Html.CheckBoxListFor(m => m.PostedRoles.UserRoleIDs, 
                    m => m.AvailableRoles,            
                    m => m.RoleId,                   
                    m => m.RoleName,              
                    m => RoleSelected.Contains(m.RoleId))
            </li>
            <li> 
                <b>Display @Html.DropDownList("DisplayValue", Model.DisplayList) users </b>
            </li>
        </ol>
          @Html.HiddenFor(m => m.hiddenId, new {@Value = Model.hiddenId })
        <input type="submit" value="Generate List" />
    </fieldset>
}

@if (Model.PaginationUserInfoModel != null)
{
    <table class="table table-striped table-bordered table-hover table-condensed">
        <tr>
            <th></th>
            <th>User Id
                @Html.ActionLink(" ", "Account", new { userId = Request.QueryString["userId"],roles = Request.QueryString["roles"], account = Request.QueryString["account"], page =  Request.QueryString["page"], display = Request.QueryString["display"], sort="id", asc="true"}, new {@class = "glyphicon glyphicon-chevron-up"})
                @Html.ActionLink(" ", "Account", new { userId = Request.QueryString["userId"],roles = Request.QueryString["roles"], account = Request.QueryString["account"], page =  Request.QueryString["page"], display = Request.QueryString["display"], sort="id", asc="false"}, new {@class = "glyphicon glyphicon-chevron-down"})
            </th>
            <th>Account Name
                @Html.ActionLink(" ", "Account", new { userId = Request.QueryString["userId"],roles = Request.QueryString["roles"], account = Request.QueryString["account"], page =  Request.QueryString["page"], display = Request.QueryString["display"], sort="account", asc="true"}, new {@class = "glyphicon glyphicon-chevron-up"})
                @Html.ActionLink(" ", "Account", new { userId = Request.QueryString["userId"],roles = Request.QueryString["roles"], account = Request.QueryString["account"], page =  Request.QueryString["page"], display = Request.QueryString["display"], sort="account", asc="false"}, new {@class = "glyphicon glyphicon-chevron-down"})
            </th>
            <th>Role
                @Html.ActionLink(" ", "Account", new { userId = Request.QueryString["userId"],roles = Request.QueryString["roles"], account = Request.QueryString["account"], page =  Request.QueryString["page"], display = Request.QueryString["display"], sort="role", asc="true"}, new {@class = "glyphicon glyphicon-chevron-up"})
                @Html.ActionLink(" ", "Account", new { userId = Request.QueryString["userId"],roles = Request.QueryString["roles"], account = Request.QueryString["account"], page =  Request.QueryString["page"], display = Request.QueryString["display"], sort="role", asc="false"}, new {@class = "glyphicon glyphicon-chevron-down"})
            </th>
        </tr>

    @if (Model.PaginationUserInfoModel.Count() > 0)
    {
        foreach (var user in Model.PaginationUserInfoModel)
        {
        <tr>
            <td>@Html.ActionLink("E","Account", new {userId = user.UserId, roles = Request.QueryString["roles"], account = Request.QueryString["account"], page =  Request.QueryString["page"], display = Request.QueryString["display"], sort = Request.QueryString["sort"], asc = Request.QueryString["asc"]}, new {@class = "btn btn-default"})</td>
            <td>@user.UserId</td>
            <td>@user.UserName </td>
            <td>@user.RoleName</td>
        </tr>
        }
    } else {
        <tr>
            <td colspan="4">There are no user that matches the query</td>
        </tr>
    }
    </table>
        
    <div class="pagedList">
        @Html.PagedListPager(Model.PaginationUserInfoModel, page => Url.Action("Account", new { userId = Request.QueryString["userId"], roles = Request.QueryString["roles"], account = Request.QueryString["account"], page, display = Request.QueryString["display"], sort = Request.QueryString["sort"], asc = Request.QueryString["asc"]}), PagedListRenderOptions.ClassicPlusFirstAndLast)
        @{
        // disabled go to page form
        // @Html.PagedListGoToPageForm(model,  Url.Action("Account", new { account = Request.QueryString["account"]}))
        }
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
