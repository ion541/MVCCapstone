@model MVCCapstone.Models.ResetPasswordModel

@{
    ViewBag.Title = "Reset";
    bool ChangeView = ViewBag.DisplayHiddenFields != null ? true : false;   // reveals the question / answer field and makes the account name field read only
       
}

<h2>Reset</h2>

<p class="message-error">@ViewBag.StatusMessage</p>

@using (Html.BeginForm("reset", "account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary()
    
    <div class="form-group">

        @Html.LabelFor(m => m.Account, new { @class = "col-sm-3 control-label" })
        <div class="col-sm-4">
            @if (ChangeView)
            {
                // Once the user has inputted in an existing account name, make the field read only
                @Html.TextBoxFor(m => m.Account, new { @class = "form-control",Value = @ViewBag.Account, ReadOnly = "readonly" })  
            } else {
                    @Html.TextBoxFor(m => m.Account, new { @class = "form-control",Value = @ViewBag.Account })
            }
        </div>
    </div>
    
    if (ChangeView)
    {
    <div class="form-group">

        @Html.LabelFor(m => m.Question, new { @class = "col-sm-3 control-label" })
        <div class="col-sm-6">
             @Html.TextBoxFor(m => m.Question, new {@class = "form-control",Value = @ViewBag.UserQuestion, ReadOnly = "readonly"})
        </div>
    </div>
    }
    
    if (ChangeView)
    {
    <div class="form-group">

         @Html.LabelFor(m => m.Answer, new { @class = "col-sm-3 control-label" })
        <div class="col-sm-6">              
            @Html.TextBoxFor(m => m.Answer, new {@class = "form-control" })
        </div>
    </div>
    }
    
    <div class="form-group">
        <label class="col-sm-3 control-label"></label>
        <div class="col-sm-8">
            <input class="btn btn-primary" style="min-width: 100px;" type="submit" value="@(ChangeView != true ? "Get Question" : "Submit Answer")" />
        </div>
    </div>
}